{"name":"iPhone Web Services Client","body":"iPhone Web Services Consumption Comparison\r\n==========================================\r\n\r\nIntroduction\r\n------------\r\n\r\nThis project showcases different transport formats and libraries to\r\nconsume web services from an iPhone application. It features a server\r\napplication, a command-line script that saves the output of the server\r\napplication in different formats, and an iPhone client application\r\n(compatible with iPhone OS 3.0 and higher).\r\n\r\nThe server application (written in PHP) reads a MySQL database\r\n(Server/data/schema.sql) and outputs data in the following formats:\r\n\r\n-   HTML\r\n-   JSON\r\n-   YAML\r\n-   XML (arbitrary format)\r\n-   SOAP\r\n-   Property list\r\n    -   Binary property list\r\n    -   XML property list\r\n\r\n-   CSV\r\n-   Protocol Buffer (Google)\r\n\r\nFor each output format, there is a single “Formatter” subclass in the\r\nServer/formatters folder. A static method in the FormatterFactory class\r\nreturns the formatter that corresponds to the requested output format.\r\n\r\nFuture Extensions\r\n-----------------\r\n\r\nIn future versions of this project, the following formats and libraries\r\ncould be integrated:\r\n\r\n-   [MessagePack](http://msgpack.org/)\r\n-   [Apache Thrift](http://incubator.apache.org/thrift/) ([StackOverflow\r\n    article](http://stackoverflow.com/questions/3620888/thrift-framework-for-iphone)\r\n    about how to integrate with the iPhone)\r\n-   [BERT](http://bert-rpc.org/)\r\n-   [Apache Avro](http://avro.apache.org/)\r\n-   [Open Network Computing Remote Procedure Call (ONC RPC) aka Sun\r\n    RPC](http://en.wikipedia.org/wiki/Open_Network_Computing_Remote_Procedure_Call)\r\n\r\nLibraries Used\r\n--------------\r\n\r\nThe project uses several different libraries:\r\n\r\nFor the server:\r\n\r\n-   [cfpropertylist](http://code.google.com/p/cfpropertylist/) - A PHP\r\n    Implementation Of Apple’s plist (PropertyList).\r\n-   [NuSOAP](http://sourceforge.net/projects/nusoap/) - SOAP Toolkit for\r\n    PHP.\r\n-   [spyc](http://code.google.com/p/spyc/) - A simple YAML loader/dumper\r\n    class for PHP.\r\n-   [pb4php](http://code.google.com/p/pb4php/) - Protocol Buffer for PHP\r\n\r\nFor the iPhone client:\r\n\r\n-   [AFNetworking](https://github.com/gowalla/AFNetworking) - a very\r\n    fast, NSOperation-based networking library\r\n-   [NextiveJSON](https://github.com/nextive/NextiveJson) - a very fast\r\n    JSON parsing library\r\n-   [ASIHTTPRequest](http://allseeing-i.com/ASIHTTPRequest) - wrapper\r\n    around the CFNetwork API, no longer maintained\r\n-   [json-framework](http://code.google.com/p/json-framework/) - A\r\n    strict JSON parser/generator for Objective-C.\r\n-   [JSONKit](https://github.com/johnezang/JSONKit) - A Very High\r\n    Performance Objective-C JSON Library.\r\n-   [YAJL-objc](https://github.com/gabriel/yajl-objc) - Objective-C\r\n    bindings for the [YAJL parser](http://lloyd.github.com/yajl/).\r\n-   [BSJSON](https://github.com/blakeseely/bsjsonadditions/) - A simple\r\n    JSON parser in Objective-C.\r\n-   [touchcode](http://code.google.com/p/touchcode/) - Repository of\r\n    iPhone and iPod Touch source code.\r\n-   [cCSVParse](http://michael.stapelberg.de/cCSVParse) - A CSV parsing\r\n    library in Objective-C.\r\n-   [TBXML V1.3](http://www.tbxml.co.uk/) - XML Parser by Tom Bradley.\r\n-   [KissXML](http://code.google.com/p/kissxml/) - KissXML is a\r\n    replacement for Cocoa’s NSXML cluster of classes. It is based on\r\n    libxml.\r\n-   [TinyXML](http://www.grinninglizard.com/tinyxml/) - TinyXML is a\r\n    simple, small, C++ XML parser that can be easily integrating into\r\n    other programs.\r\n-   [gdata-objectivec-client](http://code.google.com/p/gdata-objectivec-client/source/browse/trunk/Source/XMLSupport/)\r\n    - XML support classes included in the Google Data APIs Objective-C\r\n    Client Library.\r\n-   [APXML](http://arashpayan.com/blog/index.php/2009/01/14/apxml-nsxmldocument-substitute-for-iphoneipod-touch/)\r\n    - NSXMLDocument ’substitute’ for iPhone/iPod Touch.\r\n-   [ProtocolBuffers](http://code.google.com/p/metasyntactic/wiki/ProtocolBuffers)\r\n    - Objective-C Protocol Buffers for OSX and the iPhone.\r\n-   [AQXMLParser](http://github.com/AlanQuatermain/aqtoolkit) - Another\r\n    parser for XML in Objective-C.\r\n-   [InAppSettingsKit](http://www.inappsettingskit.com/) - Library\r\n    allowing to access the current setting bundle from the application.\r\n\r\n### YAML in Cocoa\r\n\r\nFor parsing YAML in Cocoa, the code in [this\r\npage](http://will.thimbleby.net/yaml.html) was adapted, removing\r\ndependencies on the Cocoa AppKit framework (not available on the\r\niPhone).\r\n\r\nIf you want to compile the YAML::Syck library with Fink, follow these\r\nsteps:\r\n\r\n1.  Install Fink on Mac OS X 10.6 from source [following these\r\n    instructions](http://www.finkproject.org/download/srcdist.php)\r\n    (there is no binary installer available for Snow Leopard at the time\r\n    of this writing).\r\n2.  Type “/sw/bin/fink install syck” to install syck.\r\n3.  The Xcode project should now compile without problems.\r\n\r\nTo avoid these steps above, this project includes a version of libsyck.a\r\nalready compiled as a “fat binary” format for both ARM (iPhone OS) and\r\nIntel (Simulator) processors.\r\n\r\n### SOAP in Cocoa\r\n\r\nThe [wsdl2objc](http://code.google.com/p/wsdl2objc/) tool was used to\r\ngenerate Objective-C (Cocoa) code from the server’s WSDL. This code was\r\nlater adapted to parse the array returned by the server.\r\n\r\nInstallation\r\n------------\r\n\r\n1.  Set up the server:\r\n    1.  Upload the “Server” folder contents via FTP or other means.\r\n    2.  Create a MySQL database.\r\n    3.  Import the “Server/data/schema.sql” file into the database. This\r\n        will create a “data” table in the database.\r\n    4.  Change the settings in the “Server/data/database.php” file to\r\n        access the database (server, username, password).\r\n\r\n2.  Set up the client:\r\n    1.  Open the “Client/Client.xcodeproj” project in Xcode.\r\n    2.  Compile the project.\r\n    3.  Execute the client, which will connect to your server and\r\n        retrieve data.\r\n    4.  If required, change the URL of the remote data tapping the\r\n        “Settings” button in the interface.\r\n\r\nOther Links\r\n-----------\r\n\r\n-   The sample data generated in this example comes from\r\n    [http://www.generatedata.com/](http://www.generatedata.com/).\r\n-   [cfpropertylist in\r\n    Ruby](http://rubyforge.org/projects/cfpropertylist/) - Read,\r\n    manipulate and write both binary and XML property lists as defined\r\n    by Apple.\r\n-   [PyYAML](http://pyyaml.org/) - PyYAML.org - the home of various YAML\r\n    implementations for Python.\r\n-   [plistlib](http://docs.python.org/dev/library/plistlib.html) -\r\n    Generate and parse Mac OS X .plist files from Python.\r\n-   [Discussion about CSV parsing in\r\n    Objective-C](http://www.cocoadev.com/index.pl?ReadWriteCSVAndTSV)\r\n-   [soapUI](http://www.soapui.org/) - Cross-platform tool for testing\r\n    SOAP web services.\r\n-   [How To Choose The Best XML Parser for Your iPhone\r\n    Project](http://www.raywenderlich.com/553/how-to-chose-the-best-xml-parser-for-your-iphone-project)\r\n    - by Ray Wenderlich, iPhone Developer and Gamer.\r\n-   [iPhone Programming Tips: building Unix\r\n    software](http://latenitesoft.blogspot.com/2008/10/iphone-programming-tips-building-unix.html)\r\n    - The bundled libsyck.a static library (fat binary for both ARM and\r\n    Intel) was created using the information in this page.\r\n-   [XML Benchmarks - libxml2\r\n    sax](http://dotnot.org/blog/archives/2008/02/23/xml-benchmarks-libxml2-sax/)\r\n-   [Using the SAX Interface of\r\n    LibXML](http://www.jamesh.id.au/articles/libxml-sax/libxml-sax.html)\r\n-   [libxml2 Push\r\n    Parsing](http://bill.dudney.net/roller/objc/entry/libxml2_push_parsing)\r\n-   [web services with cocoa\r\n    surprise](http://samsoff.es/posts/web-services-with-cocoa-surprise)\r\n-   [iphone plist\r\n    tutorial](http://samsoff.es/posts/iphone-plist-tutorial)\r\n-   [Comparison of data serialization\r\n    formats](http://en.wikipedia.org/wiki/Comparison_of_data_serialization_formats)\r\n-   [Property list](http://en.wikipedia.org/wiki/Property_list) -\r\n    Wikipedia page.\r\n-   [Protocol Buffers](http://en.wikipedia.org/wiki/Protocol_Buffers) -\r\n    Wikipedia page.\r\n-   [Protocol Buffers Developer\r\n    Guide](http://code.google.com/apis/protocolbuffers/docs/overview.html)\r\n-   [XMLRPC\r\n    framework](http://iphone.trac.wordpress.org/browser/trunk/Classes/XMLRPC)\r\n    used by the WordPress iPhone application.\r\n-   [AQXMLParser == Big Memory\r\n    Win](http://quatermain.tumblr.com/post/93651539/aqxmlparser-big-memory-win)\r\n    - Article about the AQXMLParser library.\r\n-   [Results of Northwind database rows serialization benchmarks run at\r\n    06/02/2010](http://www.servicestack.net/benchmarks/NorthwindDatabaseRowsSerialization.1000000-times.2010-02-06.html)\r\n    - Interesting analysis of serialization performance using .NET\r\n    libraries.\r\n\r\nThe application icon and splash screen have been adapted from [this\r\npicture](http://www.eee.bham.ac.uk/com_test/img\\dsnl\\internet15jan06.png).\r\n\r\nLicense\r\n-------\r\n\r\nThis project is released with a liberal BSD license. See the LICENSE\r\nfile for details.\r\n","tagline":"This project showcases different transport formats and libraries to consume web services from an iOS application.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}